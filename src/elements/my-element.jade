link(rel="import", href="../polymer/polymer.html")
polymer-element( name="my-element" )
  template
    .row
      .col--xs4
        label( for="paycheck") Paycheck
      .col--xs8
        input#paycheck(
          name="paycheck"
          type="number"
          min=0
          value="{{grossIncomePerMonth}}"
          required
        )

    .row
      .col--xs4
        label( for="expenses") Expenses
      .col--xs8
        input#expenses(
          name="expenses"
          type="number"
          min=0
          value="{{totalExpensesPerMonth}}"
          required
        )

    // birthdate
    .row
      .col--xs4
        label( for="birthdate") birthdate
      .col--xs8
        input#birthdate(
          name="birthdate"
          type="date"
          value="{{birthdate}}"
          required
        )

    // seed
    .row
      .col--xs4
        label( for="seed") seed
      .col--xs8
        input#seed(
          name="seed"
          type="number"
          required
          step=1000
          value="{{seed}}"
        )

    // retirement age
    .row
      .col--xs4
        label( for="retireAge") retirement age
      .col--xs8
        input#retireAge(
          name="retireAge"
          type="number"
          min=0
          value="{{retireAge}}"
          required
        )

    // death age
    .row
      .col--xs4
        label( for="death") death age
      .col--xs8
        input#death(
          name="death"
          type="number"
          min=0
          value="{{death}}"
          required
        )

    // inflation
    .row
      .col--xs4
        label(
          .col--xs8
          for="inflation") Inflation
      .col--xs8
        input#inflation(
          name="inflation"
          type="number"
          step="0.001"
          value="{{inflation}}"
          required
        )
    // return
    .row
      .col--xs4
        label(for="return") Return
      .col--xs8
        input#return(
          name="return"
          type="number"
          step="0.01"
          value="{{return}}"
        )
    // year
    .row
      .col--xs4
        label(for="year") Year
      .col--xs8
        input#year(
          name="year"
          type="number"
          value="{{year}}"
        )
    .row
      .col--xs12
        button(on-click="{{drawChart}}") draw
    .row
      .col--xs4
        label if money grows with inflation
      .col--xs8 {{inflSum|currency}}
    .row
      .col--xs4
        label stocks
      .col--xs8 {{stockMSum|currency}}
    .row
      .col--xs12 retire {{yearsFromNow}} years from now in {{retireYear}}
    .row
      .col--xs12 income {{year|getXYearsInFuture(grossIncomePerMonth)}}
    .row
      .col--xs12 expenses {{year|getXYearsInFuture(totalExpensesPerMonth)}}
    .row
      .col--xs12 netincome {{year|getXYearsInFuture(netIncomePerMonth)}}
    .row
      .col--xs12
        #foo
  script.
    'use strict';
    var options = { style: 'currency', currency: 'USD' };
    var numberFormat = new Intl.NumberFormat('en-US', options);
    var model = {
      observe: {
        totalExpensesPerMonth: 'drawChart',
        grossIncomePerMonth: 'drawChart',
        return: 'drawChart',
        inflation: 'drawChart',
        retireAge: 'drawChart',
        birthdate: 'drawChart'
      },
      totalExpensesPerMonth: 0,
      grossIncomePerMonth: 0,
      get netIncomePerMonth () {
        return this.grossIncomePerMonth - this.totalExpensesPerMonth;
      },
      return: 1.2,
      inflation: 1.03,
      death: 100,
      retireAge: 65,
      birthdate: '1901-01-01',
      seed: 10000,
      year: 0,
      get dNow () {
        return new Date();
      },
      get bdate () {
        var offset = this.dNow.getTimezoneOffset() / 60;
        return new Date(this.birthdate + 'T00:00:00-0' + offset + ':00');
      },
      get retireYear () {
        return this.bdate.getUTCFullYear() + this.retireAge;
      },
      get yearsFromNow () {
        return this.retireYear - this.dNow.getUTCFullYear();
      },
      getXYearsInFuture: function (years, x) {
        return 12 * x * Math.pow(this.inflation, years);
      },
      growth: function growth (feed, grow, cycles) {
        return feed * (1 - Math.pow(grow, cycles + 1))/(1 - grow);
      },
      get inflSum () {
        return this.growth(12 * this.netIncomePerMonth, this.inflation, this.yearsFromNow);
      },
      get stockMSum () {
        return this.growth(12 * this.netIncomePerMonth, this.return, this.yearsFromNow);
      },
      currency: function (ammount) {
        return numberFormat.format(ammount);
      },
      drawChart: function () {
        // Create the data table.
        var data = new google.visualization.DataTable();
        data.addColumn('number', 'years from now');
        data.addColumn('number', 'gross income');
        data.addColumn('number', 'expenses');
        data.addColumn('number', 'total savings');
        data.addColumn('number', 'total invested');

        var rows = [];
        for (var i=0; i < this.yearsFromNow; i++) {
          rows.push([
            i,
            this.getXYearsInFuture(i, this.grossIncomePerMonth),
            this.getXYearsInFuture(i, this.totalExpensesPerMonth),
            this.growth(12 * this.netIncomePerMonth, this.inflation, i),
            this.growth(12 * this.netIncomePerMonth, this.return, i)
          ]);
        }
        data.addRows(rows);

        var options = {
          title: "foo",
          hAxis: {
            title: 'Time'
          },
          vAxis: {
            title: 'Popularity'
          },
          colors: ['#a52714', '#097138', '#bada55', '#deadbe'],
          height: 1000
        };


        // Instantiate and draw our chart, passing in some options.
        var chart = new google.charts.Line(this.$.foo);
        chart.draw(data, options);
      },
      domReady: function () {
        google.setOnLoadCallback(this.drawChart.bind(this));
        if (window.gchartsLoaded) {
          this.drawChart();
        }
      }
    };

    Polymer(model);
